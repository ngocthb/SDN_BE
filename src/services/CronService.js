const cron = require("node-cron");
const ReminderService = require("../services/ReminderService");
const QuitPlansService = require("../services/QuitPlansService");
const SubscriptionReminderService = require("../services/SubscriptionReminderService");
// Ch·∫°y h√†ng ng√†y l√∫c 17:00 (5h chi·ªÅu) cho t·∫•t c·∫£ users ch∆∞a ghi nh·∫≠n
const startDailyReminderCron = () => {
    // Cron pattern: "0 0 17 * * *" = 17:00 h√†ng ng√†y
    cron.schedule("0 0 17 * * *", async () => {
        console.log("üïê B·∫Øt ƒë·∫ßu ch·∫°y cron job g·ª≠i email nh·∫Øc nh·ªü h√†ng ng√†y...");

        const result = await ReminderService.sendRemindersToAllUnloggedUsers();

        if (result.success) {
            console.log(`‚úÖ Ho√†n th√†nh g·ª≠i email: ${result.data.emailsSent} email ƒë√£ g·ª≠i`);
        } else {
            console.error(`‚ùå L·ªói g·ª≠i email: ${result.message}`);
        }
    }, {
        scheduled: true,
        timezone: "Asia/Ho_Chi_Minh" // M√∫i gi·ªù Vi·ªát Nam
    });

    console.log("‚úÖ ƒê√£ kh·ªüi t·∫°o cron job g·ª≠i email nh·∫Øc nh·ªü h√†ng ng√†y l√∫c 17:00");
};

// Test cron job (ch·∫°y m·ªói 2 ph√∫t ƒë·ªÉ test)
const startTestReminderCron = () => {
    cron.schedule("0 */2 * * * *", async () => {
        console.log("üß™ Test cron job - g·ª≠i email nh·∫Øc nh·ªü...");

        const result = await ReminderService.sendRemindersToAllUnloggedUsers();

        if (result.success) {
            console.log(`üß™ Test k·∫øt qu·∫£: ${result.data.emailsSent} email ƒë√£ g·ª≠i`);
        } else {
            console.error(`üß™ Test l·ªói: ${result.message}`);
        }
    }, {
        scheduled: true,
        timezone: "Asia/Ho_Chi_Minh"
    });

    console.log("üß™ ƒê√£ kh·ªüi t·∫°o test cron job (ch·∫°y m·ªói 2 ph√∫t)");
};

// Cron job ch·∫°y h√†ng ng√†y l√∫c 17:30 ƒë·ªÉ g·ª≠i b√°o c√°o t·ªïng k·∫øt
const startDailySummaryCron = () => {
    cron.schedule("0 30 17 * * *", async () => {
        console.log("üìä T·∫°o b√°o c√°o t·ªïng k·∫øt ng√†y...");
        // C√≥ th·ªÉ th√™m logic t·∫°o b√°o c√°o t·ªïng k·∫øt ·ªü ƒë√¢y
    }, {
        scheduled: true,
        timezone: "Asia/Ho_Chi_Minh"
    });

    console.log("üìä ƒê√£ kh·ªüi t·∫°o cron job b√°o c√°o t·ªïng k·∫øt l√∫c 17:30");
};

// TH√äM M·ªöI: Cron job t·ª± ƒë·ªông ho√†n th√†nh k·∫ø ho·∫°ch h·∫øt h·∫°n v√† g·ª≠i email
const startAutoCompleteCron = () => {
    // Ch·∫°y h√†ng ng√†y l√∫c 8:00 s√°ng ƒë·ªÉ t·ª± ƒë·ªông ho√†n th√†nh k·∫ø ho·∫°ch h·∫øt h·∫°n
    cron.schedule("0 0 8 * * *", async () => {
        console.log("üïê B·∫Øt ƒë·∫ßu ki·ªÉm tra v√† t·ª± ƒë·ªông ho√†n th√†nh k·∫ø ho·∫°ch h·∫øt h·∫°n...");

        try {
            const result = await QuitPlansService.autoCompleteExpiredPlans();

            if (result.success) {
                console.log(`‚úÖ T·ª± ƒë·ªông ho√†n th√†nh: ${result.data.autoCompletedCount} k·∫ø ho·∫°ch, g·ª≠i ${result.data.emailsSent} email`);
            } else {
                console.error(`‚ùå L·ªói t·ª± ƒë·ªông ho√†n th√†nh k·∫ø ho·∫°ch: ${result.message}`);
            }
        } catch (error) {
            console.error("‚ùå L·ªói t·ª± ƒë·ªông ho√†n th√†nh k·∫ø ho·∫°ch:", error.message);
        }
    }, {
        scheduled: true,
        timezone: "Asia/Ho_Chi_Minh"
    });

    console.log("‚úÖ ƒê√£ kh·ªüi t·∫°o cron job t·ª± ƒë·ªông ho√†n th√†nh k·∫ø ho·∫°ch h·∫øt h·∫°n l√∫c 8:00 s√°ng");
};

// TH√äM M·ªöI: Cron job ki·ªÉm tra subscription s·∫Øp h·∫øt h·∫°n
const startSubscriptionExpirationCron = () => {
    // Ch·∫°y h√†ng ng√†y l√∫c 9:00 s√°ng ƒë·ªÉ ki·ªÉm tra subscription s·∫Øp h·∫øt h·∫°n
    cron.schedule("0 0 9 * * *", async () => {
        console.log("üìß B·∫Øt ƒë·∫ßu ki·ªÉm tra subscription s·∫Øp h·∫øt h·∫°n v√† g·ª≠i email c·∫£nh b√°o...");

        try {
            const result = await SubscriptionReminderService.checkAndSendExpirationWarnings();

            if (result.success) {
                console.log(`‚úÖ Ho√†n th√†nh ki·ªÉm tra subscription: ${result.data.subscriptionsChecked} subscription ƒë∆∞·ª£c ki·ªÉm tra, ${result.data.emailsSent} email c·∫£nh b√°o ƒë√£ g·ª≠i, ${result.data.emailsFailed} email th·∫•t b·∫°i`);
            } else {
                console.error(`‚ùå L·ªói ki·ªÉm tra subscription: ${result.message}`);
            }
        } catch (error) {
            console.error("‚ùå L·ªói cron job ki·ªÉm tra subscription:", error.message);
        }
    }, {
        scheduled: true,
        timezone: "Asia/Ho_Chi_Minh"
    });

    console.log("‚úÖ ƒê√£ kh·ªüi t·∫°o cron job ki·ªÉm tra subscription s·∫Øp h·∫øt h·∫°n l√∫c 9:00 s√°ng");
};

module.exports = {
    startDailyReminderCron,
    startTestReminderCron,
    startDailySummaryCron,
    startAutoCompleteCron,
    startSubscriptionExpirationCron
};