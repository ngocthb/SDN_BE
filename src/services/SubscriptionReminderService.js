const SubscriptionModel = require("../models/SubscriptionsModel");
const UserModel = require("../models/UserModel");
const nodemailer = require("nodemailer");

// C·∫•u h√¨nh email transporter
const transporter = nodemailer.createTransport({
    service: "gmail",
    auth: {
        user: process.env.EMAIL_USER,
        pass: process.env.EMAIL_PASS,
    },
});

const sendExpirationWarningEmail = async (user, subscription) => {
    const daysRemaining = Math.ceil((new Date(subscription.endDate) - new Date()) / (1000 * 60 * 60 * 24));

    const mailOptions = {
        from: process.env.EMAIL_USER,
        to: user.email,
        subject: "‚ö†Ô∏è G√≥i ƒëƒÉng k√Ω c·ªßa b·∫°n s·∫Øp h·∫øt h·∫°n",
        html: `
            <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
                <h2 style="color: #ff6b35;">Th√¥ng b√°o g√≥i ƒëƒÉng k√Ω s·∫Øp h·∫øt h·∫°n</h2>
                <p>Xin ch√†o <strong>${user.fullName || user.email}</strong>,</p>
                
                <div style="background-color: #fff3cd; border: 1px solid #ffeaa7; padding: 15px; border-radius: 5px; margin: 20px 0;">
                    <h3 style="color: #856404; margin-top: 0;">‚ö†Ô∏è C·∫£nh b√°o h·∫øt h·∫°n</h3>
                    <p style="margin: 0;">G√≥i ƒëƒÉng k√Ω <strong>${subscription.membershipId.name}</strong> c·ªßa b·∫°n s·∫Ω h·∫øt h·∫°n trong <strong>${daysRemaining} ng√†y</strong>.</p>
                    <p style="margin: 5px 0 0 0;"><strong>Ng√†y h·∫øt h·∫°n:</strong> ${new Date(subscription.endDate).toLocaleDateString('vi-VN')}</p>
                </div>

                <p>ƒê·ªÉ ti·∫øp t·ª•c s·ª≠ d·ª•ng d·ªãch v·ª• m√† kh√¥ng b·ªã gi√°n ƒëo·∫°n, vui l√≤ng gia h·∫°n g√≥i ƒëƒÉng k√Ω c·ªßa b·∫°n.</p>
                
                <div style="text-align: center; margin: 30px 0;">
                    <a href="${process.env.FRONTEND_URL}/membership" 
                       style="background-color: #4CAF50; color: white; padding: 12px 24px; text-decoration: none; border-radius: 5px; display: inline-block;">
                        Gia h·∫°n ngay
                    </a>
                </div>

                <p style="color: #666; font-size: 14px;">
                    N·∫øu b·∫°n c√≥ b·∫•t k·ª≥ c√¢u h·ªèi n√†o, vui l√≤ng li√™n h·ªá v·ªõi ch√∫ng t√¥i.
                </p>
                
                <hr style="margin: 30px 0; border: none; border-top: 1px solid #eee;">
                <p style="color: #999; font-size: 12px; text-align: center;">
                    Email n√†y ƒë∆∞·ª£c g·ª≠i t·ª± ƒë·ªông. Vui l√≤ng kh√¥ng tr·∫£ l·ªùi email n√†y.
                </p>
            </div>
        `,
    };

    try {
        await transporter.sendMail(mailOptions);
        return { success: true };
    } catch (error) {
        console.error(`L·ªói g·ª≠i email cho ${user.email}:`, error);
        return { success: false, error: error.message };
    }
};

const checkAndSendExpirationWarnings = async () => {
    try {
        // T√≠nh to√°n ng√†y sau 3 ng√†y t·ª´ hi·ªán t·∫°i
        const threeDaysFromNow = new Date();
        threeDaysFromNow.setDate(threeDaysFromNow.getDate() + 3);
        threeDaysFromNow.setHours(23, 59, 59, 999); // Cu·ªëi ng√†y

        const startOfThreeDaysFromNow = new Date(threeDaysFromNow);
        startOfThreeDaysFromNow.setHours(0, 0, 0, 0); // ƒê·∫ßu ng√†y

        // T√¨m c√°c subscription active s·∫Ω h·∫øt h·∫°n trong 3 ng√†y
        const expiringSubscriptions = await SubscriptionModel.find({
            status: "active",
            endDate: {
                $gte: startOfThreeDaysFromNow,
                $lte: threeDaysFromNow
            }
        }).populate("userId membershipId");

        console.log(`üîç T√¨m th·∫•y ${expiringSubscriptions.length} subscription s·∫Øp h·∫øt h·∫°n trong 3 ng√†y`);

        let emailsSent = 0;
        let emailsFailed = 0;

        for (const subscription of expiringSubscriptions) {
            if (!subscription.userId || !subscription.userId.email) {
                console.log(`‚ö†Ô∏è B·ªè qua subscription ${subscription._id} - thi·∫øu th√¥ng tin user`);
                continue;
            }

            // Ki·ªÉm tra xem ƒë√£ g·ª≠i email c·∫£nh b√°o cho subscription n√†y ch∆∞a
            // C√≥ th·ªÉ th√™m field lastWarningEmailSent v√†o model ƒë·ªÉ tr√°nh spam
            const result = await sendExpirationWarningEmail(subscription.userId, subscription);

            if (result.success) {
                emailsSent++;
                console.log(`‚úÖ ƒê√£ g·ª≠i email c·∫£nh b√°o cho ${subscription.userId.email}`);

                // C√≥ th·ªÉ c·∫≠p nh·∫≠t field ƒë·ªÉ ƒë√°nh d·∫•u ƒë√£ g·ª≠i email
                // await SubscriptionModel.findByIdAndUpdate(subscription._id, {
                //     lastWarningEmailSent: new Date()
                // });
            } else {
                emailsFailed++;
                console.error(`‚ùå G·ª≠i email th·∫•t b·∫°i cho ${subscription.userId.email}`);
            }
        }

        return {
            success: true,
            data: {
                subscriptionsChecked: expiringSubscriptions.length,
                emailsSent,
                emailsFailed
            }
        };

    } catch (error) {
        console.error("L·ªói ki·ªÉm tra subscription s·∫Øp h·∫øt h·∫°n:", error);
        return {
            success: false,
            message: error.message
        };
    }
};

module.exports = {
    checkAndSendExpirationWarnings
};