const SubscriptionModel = require("../models/SubscriptionsModel");
const UserModel = require("../models/UserModel");
const nodemailer = require("nodemailer");

const dotenv = require("dotenv");
dotenv.config();

// C·∫•u h√¨nh email transporter - S·ª¨A THEO ReminderService
const transporter = nodemailer.createTransport({
    host: process.env.SMTP_HOST,
    port: process.env.SMTP_PORT,
    secure: false,
    auth: {
        user: process.env.SMTP_USER,
        pass: process.env.SMTP_PASS,
    },
});

const sendExpirationWarningEmail = async (user, subscription) => {
    const daysRemaining = Math.ceil((new Date(subscription.endDate) - new Date()) / (1000 * 60 * 60 * 24));

    const emailHTML = `
        <div style="font-family: Arial, sans-serif; padding: 20px; max-width: 600px; margin: auto; border: 1px solid #ddd; border-radius: 10px; background-color: #f9f9f9;">
            <div style="text-align: center; margin-bottom: 20px;">
                <h2 style="color: #ffc107; margin: 0;">‚è∞ Th√¥ng b√°o g√≥i ƒëƒÉng k√Ω s·∫Øp h·∫øt h·∫°n</h2>
                <p style="color: #6c757d; font-size: 14px;">Ch√†o ${user.name || user.email}, g√≥i ƒëƒÉng k√Ω c·ªßa b·∫°n s·∫Øp h·∫øt h·∫°n!</p>
            </div>

            <div style="background-color: #fff3cd; border: 1px solid #ffeaa7; padding: 20px; border-radius: 8px; margin-bottom: 20px;">
                <h3 style="color: #856404; margin-top: 0;">‚ö†Ô∏è C·∫£nh b√°o h·∫øt h·∫°n</h3>
                <p style="color: #856404; font-size: 16px; margin: 0;">
                    G√≥i ƒëƒÉng k√Ω <strong>${subscription.membershipId.name}</strong> c·ªßa b·∫°n s·∫Ω h·∫øt h·∫°n trong <strong>${daysRemaining} ng√†y</strong>.
                </p>
                <p style="margin: 5px 0 0 0; color: #856404;"><strong>Ng√†y h·∫øt h·∫°n:</strong> ${new Date(subscription.endDate).toLocaleDateString('vi-VN')}</p>
            </div>

            <div style="background-color: white; padding: 20px; border-radius: 8px; margin-bottom: 20px;">
                <h3 style="color: #007bff; margin-top: 0;">üìã Th√¥ng tin g√≥i hi·ªán t·∫°i</h3>
                <div style="border-left: 4px solid #007bff; padding-left: 15px;">
                    <p style="font-size: 16px; margin: 5px 0;"><strong>G√≥i:</strong> ${subscription.membershipId.name}</p>
                    <p style="font-size: 14px; margin: 5px 0; color: #6c757d;"><strong>M√¥ t·∫£:</strong> ${subscription.membershipId.description || 'Kh√¥ng c√≥ m√¥ t·∫£'}</p>
                    <p style="font-size: 14px; margin: 5px 0; color: #6c757d;"><strong>Gi√°:</strong> ${subscription.membershipId.price?.toLocaleString('vi-VN') || 'N/A'} VND</p>
                    <p style="font-size: 14px; margin: 5px 0; color: #6c757d;"><strong>Th·ªùi h·∫°n:</strong> ${subscription.membershipId.duration || 'N/A'} ng√†y</p>
                </div>
            </div>

            <div style="background-color: #e7f3ff; border: 1px solid #b3d9ff; padding: 15px; border-radius: 8px; margin-bottom: 20px;">
                <h4 style="color: #0056b3; margin-top: 0;">üéØ L·ª£i √≠ch khi gia h·∫°n</h4>
                <ul style="color: #0056b3; margin: 0; padding-left: 20px;">
                    <li>Ti·∫øp t·ª•c s·ª≠ d·ª•ng ƒë·∫ßy ƒë·ªß t√≠nh nƒÉng premium</li>
                    <li>Kh√¥ng b·ªã gi√°n ƒëo·∫°n qu√° tr√¨nh cai thu·ªëc</li>
                    <li>Nh·∫≠n h·ªó tr·ª£ ∆∞u ti√™n t·ª´ ƒë·ªôi ng≈© chuy√™n gia</li>
                    <li>Truy c·∫≠p b√°o c√°o ti·∫øn tr√¨nh chi ti·∫øt</li>
                </ul>
            </div>

            <div style="text-align: center; margin: 30px 0;">
                <a href="${process.env.CLIENT_URL || 'http://localhost:3000'}/subscription/renew" 
                   style="background-color: #28a745; color: white; padding: 12px 24px; text-decoration: none; border-radius: 25px; font-weight: bold; display: inline-block; margin-right: 10px;">
                    üí≥ Gia h·∫°n ngay
                </a>
                <a href="${process.env.CLIENT_URL || 'http://localhost:3000'}/membership/packages" 
                   style="background-color: #007bff; color: white; padding: 12px 24px; text-decoration: none; border-radius: 25px; font-weight: bold; display: inline-block;">
                    üì¶ Xem c√°c g√≥i kh√°c
                </a>
            </div>

            <div style="background-color: white; padding: 15px; border-radius: 8px; margin-bottom: 20px;">
                <h4 style="color: #6c757d; margin-top: 0;">üí° L∆∞u √Ω quan tr·ªçng</h4>
                <p style="color: #495057; margin: 0; font-size: 14px;">
                    ƒê·ªÉ ƒë·∫£m b·∫£o kh√¥ng b·ªã gi√°n ƒëo·∫°n d·ªãch v·ª•, ch√∫ng t√¥i khuy·∫øn ngh·ªã b·∫°n gia h·∫°n tr∆∞·ªõc √≠t nh·∫•t 2-3 ng√†y.
                    Sau khi g√≥i h·∫øt h·∫°n, b·∫°n s·∫Ω ch·ªâ c√≥ th·ªÉ s·ª≠ d·ª•ng t√≠nh nƒÉng c∆° b·∫£n.
                </p>
            </div>

            <hr style="margin: 30px 0; border: none; border-top: 1px solid #eee;">
            <div style="text-align: center;">
                <p style="color: #6c757d; font-size: 12px; margin: 0;">
                    N·∫øu b·∫°n c√≥ b·∫•t k·ª≥ c√¢u h·ªèi n√†o, vui l√≤ng li√™n h·ªá v·ªõi ch√∫ng t√¥i qua email ho·∫∑c hotline h·ªó tr·ª£.
                </p>
                <p style="color: #6c757d; font-size: 12px; margin: 5px 0 0 0;">
                    &copy; 2025 ·ª®ng d·ª•ng cai thu·ªëc. C·∫£m ∆°n b·∫°n ƒë√£ tin t∆∞·ªüng!
                </p>
                <p style="color: #999; font-size: 10px; margin: 5px 0 0 0;">
                    Email n√†y ƒë∆∞·ª£c g·ª≠i t·ª± ƒë·ªông. Vui l√≤ng kh√¥ng tr·∫£ l·ªùi email n√†y.
                </p>
            </div>
        </div>
    `;

    const mailOptions = {
        from: process.env.SMTP_USER, // S·ª¨A: d√πng SMTP_USER thay v√¨ EMAIL_USER
        to: user.email,
        subject: `‚ö†Ô∏è G√≥i ƒëƒÉng k√Ω h·∫øt h·∫°n trong ${daysRemaining} ng√†y`,
        html: emailHTML,
    };

    try {
        await transporter.sendMail(mailOptions);
        console.log(`‚úÖ ƒê√£ g·ª≠i email c·∫£nh b√°o cho ${user.name || user.email} (${user.email})`);
        return { success: true };
    } catch (error) {
        console.error(`‚ùå L·ªói g·ª≠i email cho ${user.email}:`, error.message);
        return { success: false, error: error.message };
    }
};

const checkAndSendExpirationWarnings = async () => {
    try {
        console.log(`üïê [${new Date().toLocaleString('vi-VN')}] B·∫Øt ƒë·∫ßu ki·ªÉm tra subscription s·∫Øp h·∫øt h·∫°n trong 3 ng√†y...`);

        // T√≠nh to√°n ng√†y sau 3 ng√†y t·ª´ hi·ªán t·∫°i
        const threeDaysFromNow = new Date();
        threeDaysFromNow.setDate(threeDaysFromNow.getDate() + 3);
        threeDaysFromNow.setHours(23, 59, 59, 999); // Cu·ªëi ng√†y

        const startOfThreeDaysFromNow = new Date(threeDaysFromNow);
        startOfThreeDaysFromNow.setHours(0, 0, 0, 0); // ƒê·∫ßu ng√†y

        // T√¨m c√°c subscription active s·∫Ω h·∫øt h·∫°n trong 3 ng√†y
        const expiringSubscriptions = await SubscriptionModel.find({
            status: "active",
            endDate: {
                $gte: startOfThreeDaysFromNow,
                $lte: threeDaysFromNow
            }
        })
            .populate("userId", "name email") // S·ª¨A: ch·ªâ l·∫•y fields c·∫ßn thi·∫øt
            .populate("membershipId", "name price duration description");

        console.log(`üîç T√¨m th·∫•y ${expiringSubscriptions.length} subscription s·∫Øp h·∫øt h·∫°n trong 3 ng√†y`);

        if (expiringSubscriptions.length === 0) {
            return {
                success: true,
                data: {
                    subscriptionsChecked: 0,
                    emailsSent: 0,
                    emailsFailed: 0,
                    executionTime: new Date().toLocaleString('vi-VN')
                },
                message: "Kh√¥ng c√≥ subscription n√†o s·∫Øp h·∫øt h·∫°n trong 3 ng√†y"
            };
        }

        let emailsSent = 0;
        let emailsFailed = 0;

        for (const subscription of expiringSubscriptions) {
            if (!subscription.userId || !subscription.userId.email) {
                console.log(`‚ö†Ô∏è B·ªè qua subscription ${subscription._id} - thi·∫øu th√¥ng tin user`);
                emailsFailed++;
                continue;
            }

            // G·ª≠i email c·∫£nh b√°o
            console.log(`üìß ƒêang g·ª≠i email cho ${subscription.userId.name || subscription.userId.email}...`);
            const result = await sendExpirationWarningEmail(subscription.userId, subscription);

            if (result.success) {
                emailsSent++;
            } else {
                emailsFailed++;
            }

            // Delay ƒë·ªÉ tr√°nh spam email server
            await new Promise(resolve => setTimeout(resolve, 1000));
        }

        const result = {
            success: true,
            data: {
                subscriptionsChecked: expiringSubscriptions.length,
                emailsSent,
                emailsFailed,
                executionTime: new Date().toLocaleString('vi-VN')
            },
            message: `Ho√†n th√†nh g·ª≠i c·∫£nh b√°o h·∫øt h·∫°n: ${emailsSent} email ƒë√£ g·ª≠i, ${emailsFailed} email th·∫•t b·∫°i`
        };

        console.log(`üìä K·∫øt qu·∫£ g·ª≠i c·∫£nh b√°o subscription: ${JSON.stringify(result.data)}`);
        return result;

    } catch (error) {
        console.error("‚ùå L·ªói ki·ªÉm tra subscription s·∫Øp h·∫øt h·∫°n:", error.message);
        return {
            success: false,
            message: error.message
        };
    }
};

const updateExpiredSubscriptions = async () => {
    try {
        console.log(`üïê [${new Date().toLocaleString('vi-VN')}] B·∫Øt ƒë·∫ßu ki·ªÉm tra v√† c·∫≠p nh·∫≠t subscription h·∫øt h·∫°n...`);

        const now = new Date();

        // T√¨m t·∫•t c·∫£ subscription c√≥ status "active" nh∆∞ng ƒë√£ h·∫øt h·∫°n
        const expiredSubscriptions = await SubscriptionModel.find({
            status: "active",
            endDate: { $lt: now } // endDate < hi·ªán t·∫°i
        }).populate("userId", "name email")
            .populate("membershipId", "name price duration");

        console.log(`üîç T√¨m th·∫•y ${expiredSubscriptions.length} subscription ƒë√£ h·∫øt h·∫°n nh∆∞ng ch∆∞a c·∫≠p nh·∫≠t tr·∫°ng th√°i`);

        if (expiredSubscriptions.length === 0) {
            return {
                success: true,
                data: {
                    totalChecked: 0,
                    updatedCount: 0,
                    executionTime: new Date().toLocaleString('vi-VN')
                },
                message: "Kh√¥ng c√≥ subscription n√†o c·∫ßn c·∫≠p nh·∫≠t tr·∫°ng th√°i"
            };
        }

        let updatedCount = 0;
        let updateErrors = 0;

        // C·∫≠p nh·∫≠t t·ª´ng subscription
        for (const subscription of expiredSubscriptions) {
            try {
                const expiredDays = Math.floor((now - new Date(subscription.endDate)) / (1000 * 60 * 60 * 24));

                await SubscriptionModel.findByIdAndUpdate(subscription._id, {
                    status: "expired"
                });

                updatedCount++;

                console.log(`‚úÖ ƒê√£ c·∫≠p nh·∫≠t subscription ${subscription._id} c·ªßa user ${subscription.userId.name || subscription.userId.email} - h·∫øt h·∫°n ${expiredDays} ng√†y`);

            } catch (updateError) {
                updateErrors++;
                console.error(`‚ùå L·ªói c·∫≠p nh·∫≠t subscription ${subscription._id}:`, updateError.message);
            }
        }

        const result = {
            success: true,
            data: {
                totalChecked: expiredSubscriptions.length,
                updatedCount,
                updateErrors,
                executionTime: new Date().toLocaleString('vi-VN'),
                expiredSubscriptions: expiredSubscriptions.map(sub => ({
                    subscriptionId: sub._id,
                    userId: sub.userId._id,
                    userEmail: sub.userId.email,
                    membershipName: sub.membershipId.name,
                    endDate: sub.endDate,
                    expiredDays: Math.floor((now - new Date(sub.endDate)) / (1000 * 60 * 60 * 24))
                }))
            },
            message: `Ho√†n th√†nh c·∫≠p nh·∫≠t subscription h·∫øt h·∫°n: ${updatedCount} ƒë√£ c·∫≠p nh·∫≠t, ${updateErrors} l·ªói`
        };

        console.log(`üìä K·∫øt qu·∫£ c·∫≠p nh·∫≠t subscription h·∫øt h·∫°n: ${updatedCount}/${expiredSubscriptions.length} th√†nh c√¥ng`);
        return result;

    } catch (error) {
        console.error("‚ùå L·ªói ki·ªÉm tra v√† c·∫≠p nh·∫≠t subscription h·∫øt h·∫°n:", error.message);
        return {
            success: false,
            message: error.message
        };
    }
};

module.exports = {
    checkAndSendExpirationWarnings,
    updateExpiredSubscriptions,
};