const nodemailer = require("nodemailer");
const QuitPlansModel = require("../models/QuitPlansModel");
const ProgressLogsModel = require("../models/ProgressLogsModel");
const UserModel = require("../models/UserModel");
const cron = require("node-cron");

const dotenv = require("dotenv");
dotenv.config();

// C·∫•u h√¨nh transporter
const transporter = nodemailer.createTransport({
    host: process.env.SMTP_HOST,
    port: process.env.SMTP_PORT,
    secure: false,
    auth: {
        user: process.env.SMTP_USER,
        pass: process.env.SMTP_PASS,
    },
});

// G·ª≠i email nh·∫Øc nh·ªü cho 1 user
const sendReminderEmail = async (user, quitPlan) => {
    try {
        // T√≠nh to√°n ti·∫øn ƒë·ªô
        const now = new Date();
        const daysPassed = Math.floor((now - quitPlan.startDate) / (1000 * 60 * 60 * 24));
        const totalDays = Math.floor((quitPlan.expectedQuitDate - quitPlan.startDate) / (1000 * 60 * 60 * 24));
        const remainingDays = Math.max(0, totalDays - daysPassed);
        const progressPercentage = Math.min(Math.round((daysPassed / totalDays) * 100), 100);

        const emailHTML = `
        <div style="font-family: Arial, sans-serif; padding: 20px; max-width: 600px; margin: auto; border: 1px solid #ddd; border-radius: 10px; background-color: #f9f9f9;">
            <div style="text-align: center; margin-bottom: 20px;">
                <h2 style="color: #28a745; margin: 0;">üåü Nh·∫Øc nh·ªü ghi nh·∫≠n ti·∫øn tr√¨nh cai thu·ªëc</h2>
                <p style="color: #6c757d; font-size: 14px;">Ch√†o ${user.name}, ƒë√£ ƒë·∫øn l√∫c ghi nh·∫≠n ti·∫øn tr√¨nh h√¥m nay!</p>
            </div>

            <div style="background-color: white; padding: 20px; border-radius: 8px; margin-bottom: 20px;">
                <h3 style="color: #007bff; margin-top: 0;">üìã K·∫ø ho·∫°ch cai thu·ªëc c·ªßa b·∫°n</h3>
                <p style="font-size: 16px; margin: 10px 0;"><strong>L√Ω do cai thu·ªëc:</strong> ${quitPlan.reason}</p>
                <p style="font-size: 14px; color: #6c757d; margin: 5px 0;">B·∫Øt ƒë·∫ßu: ${quitPlan.startDate.toLocaleDateString('vi-VN')}</p>
                <p style="font-size: 14px; color: #6c757d; margin: 5px 0;">D·ª± ki·∫øn ho√†n th√†nh: ${quitPlan.expectedQuitDate.toLocaleDateString('vi-VN')}</p>
            </div>

            <div style="background-color: white; padding: 20px; border-radius: 8px; margin-bottom: 20px;">
                <h3 style="color: #28a745; margin-top: 0;">üìä Ti·∫øn tr√¨nh hi·ªán t·∫°i</h3>
                <div style="display: flex; justify-content: space-between; margin-bottom: 15px;">
                    <div style="text-align: center;">
                        <div style="font-size: 24px; font-weight: bold; color: #007bff;">${daysPassed}</div>
                        <div style="font-size: 12px; color: #6c757d;">Ng√†y ƒë√£ tr·∫£i qua</div>
                    </div>
                    <div style="text-align: center;">
                        <div style="font-size: 24px; font-weight: bold; color: #28a745;">${progressPercentage}%</div>
                        <div style="font-size: 12px; color: #6c757d;">Ti·∫øn ƒë·ªô</div>
                    </div>
                    <div style="text-align: center;">
                        <div style="font-size: 24px; font-weight: bold; color: #ffc107;">${remainingDays}</div>
                        <div style="font-size: 12px; color: #6c757d;">Ng√†y c√≤n l·∫°i</div>
                    </div>
                </div>
                
                <div style="background-color: #e9ecef; height: 10px; border-radius: 5px; overflow: hidden;">
                    <div style="background-color: #28a745; height: 100%; width: ${progressPercentage}%; transition: width 0.3s ease;"></div>
                </div>
            </div>

            <div style="background-color: #fff3cd; border: 1px solid #ffeaa7; padding: 15px; border-radius: 8px; margin-bottom: 20px;">
                <h4 style="color: #856404; margin-top: 0;">‚è∞ ƒê√£ ƒë·∫øn l√∫c ghi nh·∫≠n ti·∫øn tr√¨nh h√¥m nay!</h4>
                <p style="color: #856404; margin-bottom: 10px;">H√£y d√†nh 2 ph√∫t ƒë·ªÉ ghi l·∫°i:</p>
                <ul style="color: #856404; margin: 0; padding-left: 20px;">
                    <li>S·ªë ƒëi·∫øu thu·ªëc ƒë√£ h√∫t h√¥m nay</li>
                    <li>T√¨nh tr·∫°ng s·ª©c kh·ªèe hi·ªán t·∫°i</li>
                    <li>T√¢m tr·∫°ng v√† c·∫£m x√∫c</li>
                </ul>
            </div>

            <div style="text-align: center; margin: 20px 0;">
                <a href="${process.env.CLIENT_URL || 'http://localhost:3000'}/progress-logs" 
                   style="background-color: #007bff; color: white; padding: 12px 30px; text-decoration: none; border-radius: 25px; font-weight: bold; display: inline-block;">
                    üìù Ghi nh·∫≠n ti·∫øn tr√¨nh ngay
                </a>
            </div>

            <div style="background-color: white; padding: 15px; border-radius: 8px; margin-bottom: 20px;">
                <h4 style="color: #28a745; margin-top: 0;">üí™ L·ªùi ƒë·ªông vi√™n</h4>
                <p style="color: #495057; margin: 0; font-style: italic;">
                    "${getMotivationalQuote(daysPassed, progressPercentage)}"
                </p>
            </div>

            <hr style="border: 0.5px solid #ddd; margin: 20px 0;">
            
            <div style="text-align: center;">
                <p style="font-size: 12px; color: #6c757d; margin: 0;">
                    &copy; 2025 ·ª®ng d·ª•ng cai thu·ªëc. Ch√∫c b·∫°n th√†nh c√¥ng!
                </p>
            </div>
        </div>
        `;

        await transporter.sendMail({
            from: process.env.SMTP_USER,
            to: user.email,
            subject: `üåü [${progressPercentage}%] Nh·∫Øc nh·ªü ghi nh·∫≠n ti·∫øn tr√¨nh cai thu·ªëc - Ng√†y ${daysPassed}`,
            html: emailHTML,
        });

        console.log(`‚úÖ ƒê√£ g·ª≠i email cho ${user.name} (${user.email})`);
        return true;

    } catch (error) {
        console.error(`‚ùå L·ªói g·ª≠i email cho ${user.email}:`, error.message);
        return false;
    }
};

// H√†m l·∫•y c√¢u ƒë·ªông vi√™n
const getMotivationalQuote = (daysPassed, progressPercentage) => {
    if (progressPercentage >= 80) {
        return "Tuy·ªát v·ªùi! B·∫°n g·∫ßn nh∆∞ ƒë√£ ho√†n th√†nh m·ª•c ti√™u r·ªìi. ƒê·ª´ng d·ª´ng l·∫°i khi ƒë√£ g·∫ßn ƒë·∫øn ƒë√≠ch!";
    } else if (progressPercentage >= 50) {
        return "Xu·∫•t s·∫Øc! B·∫°n ƒë√£ v∆∞·ª£t qua ƒë∆∞·ª£c n·ª≠a ch·∫∑ng ƒë∆∞·ªùng. Ph·∫ßn kh√≥ khƒÉn nh·∫•t ƒë√£ qua r·ªìi!";
    } else if (daysPassed >= 7) {
        return "B·∫°n ƒë√£ tr·∫£i qua tu·∫ßn ƒë·∫ßu kh√≥ khƒÉn nh·∫•t! C∆° th·ªÉ b·∫°n ƒëang d·∫ßn th√≠ch nghi v·ªõi cu·ªôc s·ªëng kh√¥ng thu·ªëc l√°.";
    } else {
        const quotes = [
            "M·ªói ng√†y kh√¥ng h√∫t thu·ªëc l√† m·ªôt chi·∫øn th·∫Øng! B·∫°n ƒëang l√†m r·∫•t t·ªët!",
            "H√†nh tr√¨nh ngh√¨n d·∫∑m b·∫Øt ƒë·∫ßu t·ª´ m·ªôt b∆∞·ªõc ch√¢n. B·∫°n ƒë√£ ƒëi ƒë∆∞·ª£c r·∫•t xa r·ªìi!",
            "S·ª©c kh·ªèe c·ªßa b·∫°n ƒëang c·∫£i thi·ªán t·ª´ng ng√†y. H√£y ti·∫øp t·ª•c!",
            "B·∫°n m·∫°nh m·∫Ω h∆°n c∆°n th√®m thu·ªëc. ƒê·ª´ng b·ªè cu·ªôc!",
            "M·ªói ƒëi·∫øu thu·ªëc b·∫°n kh√¥ng h√∫t l√† m√≥n qu√† cho t∆∞∆°ng lai c·ªßa ch√≠nh b·∫°n."
        ];
        return quotes[Math.floor(Math.random() * quotes.length)];
    }
};

// G·ª≠i email cho t·∫•t c·∫£ users ch∆∞a ghi nh·∫≠n ti·∫øn tr√¨nh
const sendRemindersToAllUnloggedUsers = async () => {
    try {
        console.log(`üïê [${new Date().toLocaleString('vi-VN')}] B·∫Øt ƒë·∫ßu ki·ªÉm tra v√† g·ª≠i email nh·∫Øc nh·ªü...`);

        // L·∫•y t·∫•t c·∫£ k·∫ø ho·∫°ch ƒëang active
        const activePlans = await QuitPlansModel.find({ isActive: true })
            .populate("userId", "name email");

        if (activePlans.length === 0) {
            console.log("üì≠ Kh√¥ng c√≥ k·∫ø ho·∫°ch n√†o ƒëang active");
            return {
                success: true,
                data: {
                    totalActivePlans: 0,
                    emailsSent: 0,
                    alreadyLogged: 0,
                    errors: 0
                },
                message: "Kh√¥ng c√≥ k·∫ø ho·∫°ch n√†o ƒëang active"
            };
        }

        console.log(`üìã T√¨m th·∫•y ${activePlans.length} k·∫ø ho·∫°ch ƒëang active`);

        // L·∫•y ng√†y h√¥m nay
        const today = new Date();
        today.setHours(0, 0, 0, 0);
        const tomorrow = new Date(today);
        tomorrow.setDate(today.getDate() + 1);

        let emailsSent = 0;
        let alreadyLogged = 0;
        let errors = 0;

        // L·∫•y t·∫•t c·∫£ logs h√¥m nay m·ªôt l·∫ßn ƒë·ªÉ t·ªëi ∆∞u
        const todayLogs = await ProgressLogsModel.find({
            date: {
                $gte: today,
                $lt: tomorrow
            }
        });

        // T·∫°o Map ƒë·ªÉ tra c·ª©u nhanh
        const loggedUserIds = new Set(todayLogs.map(log => log.userId.toString()));

        // X·ª≠ l√Ω t·ª´ng k·∫ø ho·∫°ch
        for (const plan of activePlans) {
            const user = plan.userId;

            // Ki·ªÉm tra user c√≥ email kh√¥ng
            if (!user || !user.email) {
                console.log(`‚ö†Ô∏è User ${user?.name || 'Unknown'} kh√¥ng c√≥ email`);
                errors++;
                continue;
            }

            // Ki·ªÉm tra user ƒë√£ ghi nh·∫≠n ti·∫øn tr√¨nh h√¥m nay ch∆∞a
            if (loggedUserIds.has(user._id.toString())) {
                console.log(`‚úÖ User ${user.name} ƒë√£ ghi nh·∫≠n ti·∫øn tr√¨nh h√¥m nay`);
                alreadyLogged++;
                continue;
            }

            // G·ª≠i email nh·∫Øc nh·ªü
            console.log(`üìß G·ª≠i email cho ${user.name}...`);
            const sent = await sendReminderEmail(user, plan);

            if (sent) {
                emailsSent++;
            } else {
                errors++;
            }

            // Delay nh·ªè ƒë·ªÉ tr√°nh spam email server
            await new Promise(resolve => setTimeout(resolve, 1000));
        }

        const result = {
            success: true,
            data: {
                totalActivePlans: activePlans.length,
                emailsSent: emailsSent,
                alreadyLogged: alreadyLogged,
                errors: errors,
                executionTime: new Date().toLocaleString('vi-VN')
            },
            message: `Ho√†n th√†nh g·ª≠i email nh·∫Øc nh·ªü: ${emailsSent} email ƒë√£ g·ª≠i, ${alreadyLogged} ƒë√£ ghi nh·∫≠n, ${errors} l·ªói`
        };

        console.log(`üìä K·∫øt qu·∫£: ${JSON.stringify(result.data)}`);
        return result;

    } catch (error) {
        console.error("‚ùå L·ªói khi g·ª≠i email nh·∫Øc nh·ªü:", error.message);
        return {
            success: false,
            message: error.message
        };
    }
};

// G·ª≠i email cho user c·ª• th·ªÉ (ƒë·ªÉ test)
const sendReminderToSpecificUser = async (userId) => {
    try {
        const plan = await QuitPlansModel.findOne({
            userId: userId,
            isActive: true
        }).populate("userId", "name email");

        if (!plan) {
            return {
                success: false,
                message: "Ng∆∞·ªùi d√πng kh√¥ng c√≥ k·∫ø ho·∫°ch active"
            };
        }

        // Ki·ªÉm tra ƒë√£ ghi nh·∫≠n ti·∫øn tr√¨nh h√¥m nay ch∆∞a
        const today = new Date();
        today.setHours(0, 0, 0, 0);
        const tomorrow = new Date(today);
        tomorrow.setDate(today.getDate() + 1);

        const todayLog = await ProgressLogsModel.findOne({
            userId: userId,
            date: {
                $gte: today,
                $lt: tomorrow
            }
        });

        if (todayLog) {
            return {
                success: false,
                message: "Ng∆∞·ªùi d√πng ƒë√£ ghi nh·∫≠n ti·∫øn tr√¨nh h√¥m nay"
            };
        }

        const sent = await sendReminderEmail(plan.userId, plan);

        return {
            success: sent,
            message: sent ? "G·ª≠i email nh·∫Øc nh·ªü th√†nh c√¥ng" : "G·ª≠i email th·∫•t b·∫°i"
        };

    } catch (error) {
        throw new Error(`L·ªói khi g·ª≠i email nh·∫Øc nh·ªü: ${error.message}`);
    }
};

module.exports = {
    sendRemindersToAllUnloggedUsers,
    sendReminderToSpecificUser,
    sendReminderEmail
};